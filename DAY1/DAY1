ðŸ“… Day 1 â€“ Introduction to Verilog RTL Design & Synthesis

Welcome to Day 1 of the RISC-V SoC Tapeout Program.
Todayâ€™s focus is on understanding how RTL (Register Transfer Level) code gets transformed into actual hardware. Weâ€™ll cover both simulation & verification and logic synthesis, supported by hands-on labs. This portfolio highlights my learning, practical experiments, and insights.

ðŸ”¹ Part 1 â€“ Open-Source Simulator (Icarus Verilog) + Lab

Icarus Verilog is an open-source tool used for simulating Verilog designs. Simulation helps us check the design functionality before moving to synthesis or hardware.

Lab 1: Environment Setup (installing and configuring Icarus Verilog)

Lab 2: Simulation of a 2:1 Multiplexer (good_mux.v) using Icarus Verilog and waveform analysis with GTKWave

ðŸ”¹ Part 2 â€“ Logic Synthesis with Yosys + Lab

Logic synthesis is the process of converting RTL designs into a gate-level netlist using a standard cell library. This is a crucial step to bridge the gap between high-level code and physical hardware.

In this session, we:

Introduced the Yosys open-source synthesis tool

Synthesized a 2-to-1 multiplexer (good_mux.v)

Analyzed the gate-level netlist generated by Yosys
